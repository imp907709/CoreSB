// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using order.Infrastructure.EF;

namespace mvccoresb.Migrations.Order
{
    [DbContext(typeof(OrderContext))]
    [Migration("20190613120448_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("order.Domain.Models.Ordering.AdressDAL", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("order.Domain.Models.Ordering.DeliveryItemDAL", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<Guid?>("ParametersId");

                    b.HasKey("Id");

                    b.HasIndex("ParametersId");

                    b.ToTable("DeliveryItem");
                });

            modelBuilder.Entity("order.Domain.Models.Ordering.DeliveryItemParameterDAL", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("Depth");

                    b.Property<float>("Height");

                    b.Property<float>("Lenght");

                    b.Property<Guid>("LenghtDimensionId");

                    b.Property<float>("Weight");

                    b.Property<Guid>("WeightDimensionId");

                    b.HasKey("Id");

                    b.HasIndex("LenghtDimensionId");

                    b.HasIndex("WeightDimensionId");

                    b.ToTable("DeliveryItemParameters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000000"),
                            Depth = 0f,
                            Height = 0f,
                            Lenght = 5f,
                            LenghtDimensionId = new Guid("00000000-0000-0000-0000-000000000003"),
                            Weight = 10f,
                            WeightDimensionId = new Guid("00000000-0000-0000-0000-000000000001")
                        });
                });

            modelBuilder.Entity("order.Domain.Models.Ordering.DimensionalUnitDAL", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("DimensionalUnit");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Description = "wight in kg",
                            Name = "kg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Description = "wight in pounds",
                            Name = "lbs"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Description = "lenght in sm",
                            Name = "sm"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Description = "lenght in inches",
                            Name = "inch"
                        });
                });

            modelBuilder.Entity("order.Domain.Models.Ordering.OrderItemDAL", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount");

                    b.Property<float>("DeliveryPrice");

                    b.Property<Guid?>("FromId");

                    b.Property<Guid?>("ItmeId");

                    b.Property<string>("Name");

                    b.Property<Guid?>("ToId");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("ItmeId");

                    b.HasIndex("ToId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("order.Domain.Models.Ordering.UnitsConvertionDAL", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("ConvertionRate");

                    b.Property<Guid>("FromId");

                    b.Property<Guid>("ToId");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("ToId");

                    b.ToTable("UnitsConvertion");

                    b.HasData(
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000000"),
                            ConvertionRate = 2.20462f,
                            FromId = new Guid("00000000-0000-0000-0000-000000000001"),
                            ToId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000000"),
                            ConvertionRate = 0.220462f,
                            FromId = new Guid("00000000-0000-0000-0000-000000000002"),
                            ToId = new Guid("00000000-0000-0000-0000-000000000001")
                        });
                });

            modelBuilder.Entity("order.Domain.Models.Ordering.DeliveryItemDAL", b =>
                {
                    b.HasOne("order.Domain.Models.Ordering.DeliveryItemParameterDAL", "Parameters")
                        .WithMany()
                        .HasForeignKey("ParametersId");
                });

            modelBuilder.Entity("order.Domain.Models.Ordering.DeliveryItemParameterDAL", b =>
                {
                    b.HasOne("order.Domain.Models.Ordering.DimensionalUnitDAL", "LenghtDimension")
                        .WithMany()
                        .HasForeignKey("LenghtDimensionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("order.Domain.Models.Ordering.DimensionalUnitDAL", "WeightDimension")
                        .WithMany("DeliveryItems")
                        .HasForeignKey("WeightDimensionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("order.Domain.Models.Ordering.OrderItemDAL", b =>
                {
                    b.HasOne("order.Domain.Models.Ordering.AdressDAL", "From")
                        .WithMany()
                        .HasForeignKey("FromId");

                    b.HasOne("order.Domain.Models.Ordering.DeliveryItemDAL", "Itme")
                        .WithMany()
                        .HasForeignKey("ItmeId");

                    b.HasOne("order.Domain.Models.Ordering.AdressDAL", "To")
                        .WithMany()
                        .HasForeignKey("ToId");
                });

            modelBuilder.Entity("order.Domain.Models.Ordering.UnitsConvertionDAL", b =>
                {
                    b.HasOne("order.Domain.Models.Ordering.DimensionalUnitDAL", "From")
                        .WithMany()
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("order.Domain.Models.Ordering.DimensionalUnitDAL", "To")
                        .WithMany("Convertions")
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
